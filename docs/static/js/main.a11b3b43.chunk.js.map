{"version":3,"sources":["examples/Advanced.js","examples/Simple.js","App.js","serviceWorker.js","index.js"],"names":["db","name","url","alreadyRemoved","charactersState","Advanced","useState","characters","setCharacters","lastDirection","setLastDirection","childRefs","useMemo","Array","length","fill","map","i","React","createRef","swipe","dir","cardsLeft","filter","person","includes","toBeRemoved","index","indexOf","push","current","href","rel","className","character","ref","key","onSwipe","direction","nameToDelete","console","log","onCardLeftScreen","style","backgroundImage","onClick","Simple","App","showAdvanced","setShowAdvanced","color","checked","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a11b3b43.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n  {\n    name: 'Richard Hendricks',\n    url: './img/richard.jpg'\n  },\n  {\n    name: 'Erlich Bachman',\n    url: './img/erlich.jpg'\n  },\n  {\n    name: 'Monica Hall',\n    url: './img/monica.jpg'\n  },\n  {\n    name: 'Jared Dunn',\n    url: './img/jared.jpg'\n  },\n  {\n    name: 'Dinesh Chugtai',\n    url: './img/dinesh.jpg'\n  }\n]\n\nconst alreadyRemoved = []\nlet charactersState = db // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\n\nfunction Advanced () {\n  const [characters, setCharacters] = useState(db)\n  const [lastDirection, setLastDirection] = useState()\n\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), [])\n\n  const swiped = (direction, nameToDelete) => {\n    console.log('removing: ' + nameToDelete)\n    setLastDirection(direction)\n    alreadyRemoved.push(nameToDelete)\n  }\n\n  const outOfFrame = (name) => {\n    console.log(name + ' left the screen!')\n    charactersState = charactersState.filter(character => character.name !== name)\n    setCharacters(charactersState)\n  }\n\n  const swipe = (dir) => {\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.name))\n    if (cardsLeft.length) {\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\n      const index = db.map(person => person.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      childRefs[index].current.swipe(dir) // Swipe the card!\n    }\n  }\n\n  return (\n    <div>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <h1>React Tinder Card</h1>\n      <div className='cardContainer'>\n        {characters.map((character, index) =>\n          <TinderCard ref={childRefs[index]} className='swipe' key={character.name} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\n            <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n              <h3>{character.name}</h3>\n            </div>\n          </TinderCard>\n        )}\n      </div>\n      <div className='buttons'>\n        <button onClick={() => swipe('left')}>Swipe left!</button>\n        <button onClick={() => swipe('right')}>Swipe right!</button>\n      </div>\n      {lastDirection ? <h2 key={lastDirection} className='infoText'>You swiped {lastDirection}</h2> : <h2 className='infoText'>Swipe a card or press a button to get started!</h2>}\n    </div>\n  )\n}\n\nexport default Advanced\n","import React, { useState } from 'react'\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n  {\n    name: 'Richard Hendricks',\n    url: './img/richard.jpg'\n  },\n  {\n    name: 'Erlich Bachman',\n    url: './img/erlich.jpg'\n  },\n  {\n    name: 'Monica Hall',\n    url: './img/monica.jpg'\n  },\n  {\n    name: 'Jared Dunn',\n    url: './img/jared.jpg'\n  },\n  {\n    name: 'Dinesh Chugtai',\n    url: './img/dinesh.jpg'\n  }\n]\n\nfunction Simple () {\n  const characters = db\n  const [lastDirection, setLastDirection] = useState()\n\n  const swiped = (direction, nameToDelete) => {\n    console.log('removing: ' + nameToDelete)\n    setLastDirection(direction)\n  }\n\n  const outOfFrame = (name) => {\n    console.log(name + ' left the screen!')\n  }\n\n  return (\n    <div>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <h1>React Tinder Card</h1>\n      <div className='cardContainer'>\n        {characters.map((character) =>\n          <TinderCard className='swipe' key={character.name} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\n            <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n              <h3>{character.name}</h3>\n            </div>\n          </TinderCard>\n        )}\n      </div>\n      {lastDirection ? <h2 className='infoText'>You swiped {lastDirection}</h2> : <h2 className='infoText' />}\n    </div>\n  )\n}\n\nexport default Simple\n","import React, { useState } from 'react'\nimport './App.css'\nimport Switch from 'react-ios-switch'\n\nimport Advanced from './examples/Advanced'\nimport Simple from './examples/Simple'\n\nfunction App () {\n  const [showAdvanced, setShowAdvanced] = useState(true)\n\n  return (\n    <div className='app'>\n      {showAdvanced ? <Advanced /> : <Simple />}\n      <div className='row'>\n        <p style={{ color: '#fff' }}>Show advanced example</p> <Switch checked={showAdvanced} onChange={setShowAdvanced} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}